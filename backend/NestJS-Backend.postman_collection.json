{
    "info": {
        "_postman_id": "nestjs-backend-collection",
        "name": "NestJS Backend API",
        "description": "Complete API collection for NestJS backend with authentication, sample endpoints, and transformers",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Authentication",
            "item": [
                {
                    "name": "Register User",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\",\n  \"role\": \"USER\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/auth/register",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "auth",
                                "register"
                            ]
                        },
                        "description": "Register a new user with name, email, password, and role"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "if (pm.response.code === 201) {",
                                    "    const response = pm.response.json();",
                                    "    if (response.token) {",
                                    "        pm.collectionVariables.set('auth_token', response.token);",
                                    "        console.log('✅ Auth token set successfully');",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Login User (Seeded)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"user@example.com\",\n  \"password\": \"user123\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/auth/login",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "auth",
                                "login"
                            ]
                        },
                        "description": "Login with seeded user credentials (user@example.com / user123)"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    if (response.token) {",
                                    "        pm.collectionVariables.set('auth_token', response.token);",
                                    "        console.log('✅ Auth token set successfully');",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Login Admin (Seeded)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"admin123\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/auth/login",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "auth",
                                "login"
                            ]
                        },
                        "description": "Login with seeded admin credentials (admin@example.com / admin123)"
                    },
                    "response": [],
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "if (pm.response.code === 200) {",
                                    "    const response = pm.response.json();",
                                    "    if (response.token) {",
                                    "        pm.collectionVariables.set('auth_token', response.token);",
                                    "        console.log('✅ Auth token set successfully');",
                                    "    }",
                                    "}"
                                ]
                            }
                        }
                    ]
                },
                {
                    "name": "Get Current User Profile",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/auth/me",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "auth",
                                "me"
                            ]
                        },
                        "description": "Get current authenticated user profile (requires JWT token)"
                    },
                    "response": []
                }
            ],
            "description": "Authentication endpoints for user registration, login, and profile management"
        },
        {
            "name": "Sample Module",
            "item": [
                {
                    "name": "Get All Samples",
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{base_url}}/api/v1/sample",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "sample"
                            ]
                        },
                        "description": "Get all samples with transformer formatting"
                    },
                    "response": []
                },
                {
                    "name": "Create Sample",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"title\": \"New Sample Item\",\n  \"description\": \"This is a new sample item created via API\",\n  \"category\": \"TECH\",\n  \"tags\": [\"api\", \"sample\", \"tech\"],\n  \"isPublished\": true\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/sample",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "sample"
                            ]
                        },
                        "description": "Create a new sample item with transformer formatting"
                    },
                    "response": []
                }
            ],
            "description": "Sample module endpoints demonstrating transformer usage"
        },
        {
            "name": "Protected Endpoints (Examples)",
            "item": [
                {
                    "name": "Protected Route (JWT Required)",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/protected",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "protected"
                            ]
                        },
                        "description": "Example of a protected route that requires JWT authentication"
                    },
                    "response": []
                },
                {
                    "name": "Admin Only Route",
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            }
                        ],
                        "url": {
                            "raw": "{{base_url}}/api/v1/admin-only",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "admin-only"
                            ]
                        },
                        "description": "Example of a route that requires ADMIN role"
                    },
                    "response": []
                },
                {
                    "name": "User Action (USER or ADMIN)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{auth_token}}",
                                "type": "text"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"action\": \"perform_user_action\",\n  \"data\": \"example data\"\n}"
                        },
                        "url": {
                            "raw": "{{base_url}}/api/v1/user-action",
                            "host": [
                                "{{base_url}}"
                            ],
                            "path": [
                                "api",
                                "v1",
                                "user-action"
                            ]
                        },
                        "description": "Example of a route that allows both USER and ADMIN roles"
                    },
                    "response": []
                }
            ],
            "description": "Example protected endpoints showing different authentication and authorization patterns"
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "base_url",
            "value": "http://backend.pension.test",
            "type": "string",
            "description": "Base URL for the NestJS backend API"
        },
        {
            "key": "auth_token",
            "value": "",
            "type": "string",
            "description": "JWT authentication token (set this after login)"
        }
    ]
}